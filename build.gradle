buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://repo.gradle.org/gradle/libs-releases-local"
		}
	}

	dependencies {
		classpath 'ch.epfl.scala:gradle-bloop_2.12:1.4.3'
	}
}

allprojects {
	apply plugin: 'scala'
	apply plugin: 'bloop'
	apply plugin: 'idea'

	idea {
		module {
			downloadJavadoc = true
			downloadSources = true
		}
	}
}

subprojects {
	version = '0.1'

	repositories {
		jcenter()
	}

	configurations {
		kindProjectorPlugin
		semanticDbPlugin
	}

	project.ext {
		scala = '2.13'
		cats = '2.1.1'
		catsEffect = '2.1.3'
		catsMTL = '0.7.1'
		catstagless = '0.11'
		circe = '0.13.0'
		circeExtras = '0.12.2'
		circeConfig = '0.7.0'

		refined = '0.9.14'

		logback = '1.2.3'

		monocle = '2.0.4'

		catsScalatest = '3.1.1'
		scalacheck = '1.14.3'
		munit = '0.7.9'

		kindProjector = '0.11.0'
		semanticdb = '4.3.18'
	}

	repositories {
		mavenCentral()
	}

	configurations {
		kindProjectorPlugin
		semanticDbPlugin
	}

	dependencies {
		kindProjectorPlugin "org.typelevel:kind-projector_2.13.3:${kindProjector}"
		semanticDbPlugin "org.scalameta:semanticdb-scalac_2.13.3:${semanticdb}"

		implementation "org.scala-lang:scala-library:${scala}.+"
		implementation "org.scala-lang:scala-reflect:${scala}.+"

		implementation "org.typelevel:cats-core_${scala}:${cats}"
		implementation "org.typelevel:cats-effect_${scala}:${catsEffect}"
		implementation "org.typelevel:cats-mtl-core_${scala}:${catsMTL}"
		implementation "org.typelevel:cats-tagless-core_${scala}:${catstagless}"
		implementation "org.typelevel:cats-tagless-macros_${scala}:${catstagless}"

		implementation "com.github.julien-truffaut:monocle-core_${scala}:${monocle}"
		implementation "com.github.julien-truffaut:monocle-macro_${scala}:${monocle}"

		implementation "eu.timepit:refined_${scala}:${refined}"

		testImplementation "org.scalameta:munit_${scala}:${munit}"
		testImplementation "org.scalameta:munit-scalacheck_${scala}:${munit}"
		testImplementation "org.scalacheck:scalacheck_${scala}:${scalacheck}"
	}

	tasks.withType(ScalaCompile) {
		configure(scalaCompileOptions.forkOptions) {
			memoryMaximumSize = '1g'
			jvmArgs = ['-XX:MaxMetaspaceSize=512m', '-Xss8m']
		}

		scalaCompileOptions.additionalParameters = [
				"-Xplugin:" + configurations.kindProjectorPlugin.asPath,
				"-Xplugin-require:kind-projector",

				'-Xplugin:' + configurations.semanticDbPlugin.asPath,
				'-P:semanticdb:synthetics:on',
				'-P:semanticdb:failures:warning',
				'-P:semanticdb:sourceroot:' + project.rootProject.projectDir,
				'-Yrangepos',
				'-Xplugin-require:semanticdb',

				'-Ymacro-annotations',

				"-deprecation", // Emit warning and location for usages of deprecated APIs.
				"-explaintypes", // Explain type errors in more detail.
				"-feature", // Emit warning and location for usages of features that should be imported explicitly.
				"-language:postfixOps",
				"-language:existentials", // Existential types (besides wildcard types) can be written and inferred
				"-language:experimental.macros", // Allow macro definition (besides implementation and application)
				"-language:higherKinds", // Allow higher-kinded types
				"-language:implicitConversions", // Allow definition of implicit functions called views
				"-unchecked", // Enable additional warnings where generated code depends on assumptions.
				"-Xcheckinit", // Wrap field accessors to throw an exception on uninitialized access.
				"-Xfatal-warnings", // Fail the compilation if there are any warnings.
				"-Xlint:adapted-args", // Warn if an argument list is modified to match the receiver.
				"-Xlint:constant", // Evaluation of a constant arithmetic expression results in an error.
				"-Xlint:delayedinit-select", // Selecting member of DelayedInit.
				"-Xlint:doc-detached", // A Scaladoc comment appears to be detached from its element.
				"-Xlint:inaccessible", // Warn about inaccessible types in method signatures.
				"-Xlint:infer-any", // Warn when a type argument is inferred to be `Any`.
				"-Xlint:missing-interpolator", // A string literal appears to be missing an interpolator id.
				"-Xlint:nullary-unit", // Warn when nullary methods return Unit.
				"-Xlint:option-implicit", // Option.apply used implicit view.
				"-Xlint:package-object-classes", // Class or object defined in package object.
				"-Xlint:poly-implicit-overload", // Parameterized overloaded implicit methods are not visible as view bounds.
				"-Xlint:private-shadow", // A private field (or class parameter) shadows a superclass field.
				"-Xlint:stars-align", // Pattern sequence wildcard must align with sequence component.
				"-Xlint:type-parameter-shadow", // A local type parameter shadows a type already in scope.
				"-Ywarn-dead-code", // Warn when dead code is identified.
				"-Ywarn-extra-implicit", // Warn when more than one implicit parameter section is defined.
				"-Ywarn-numeric-widen", // Warn when numerics are widened.
				"-Ywarn-unused:implicits", // Warn if an implicit parameter is unused.
				"-Ywarn-unused:imports", // Warn if an import selector is not referenced.
				"-Ywarn-unused:locals", // Warn if a local definition is unused.
//                "-Ywarn-unused:params", // Warn if a value parameter is unused.
				"-Ywarn-unused:patvars", // Warn if a variable bound in a pattern is unused.
				"-Ywarn-unused:privates", // Warn if a private member is unused.
				"-Ywarn-value-discard", // Warn when non-Unit expression results are unused.
				"-Ybackend-parallelism", "8", // Enable paralellisation â€” change to desired number!
				"-Ycache-plugin-class-loader:last-modified", // Enables caching of classloaders for compiler plugins
				"-Ycache-macro-class-loader:last-modified" // and macro definitions. This can lead to performance improvements.
		]
	}
}